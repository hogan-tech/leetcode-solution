# time complexity: O(nlogn)
# space complexity: O(n)
from typing import List


def transformXor(a: List[int], invert: bool = False) -> None:
    n = len(a)
    step = 1
    while step < n:
        for i in range(0, n, step * 2):
            for j in range(i, i + step):
                u = a[j]
                v = a[j + step]
                a[j] = u + v
                a[j + step] = u - v
        step *= 2
    if invert:
        for i in range(n):
            a[i] //= n


def xorCalculate(f: List[int], g: List[int]) -> List[int]:
    n = len(f)
    F = f.copy()
    G = g.copy()

    transformXor(F)
    transformXor(G)

    for i in range(n):
        F[i] *= G[i]

    transformXor(F, invert=True)
    return F


class Solution:
    def uniqueXorTriplets(self, nums: List[int]) -> int:
        S = set(nums)
        L = 2048
        F = [0] * L
        for x in S:
            F[x] = 1

        T = xorCalculate(F, F)
        H = xorCalculate(T, F)

        result = len(S)
        for t in range(L):
            if t not in S and H[t] > 0:
                result += 1
        return result


nums = [1, 2]
print(Solution().uniqueXorTriplets(nums))
nums = [3, 1, 2]
print(Solution().uniqueXorTriplets(nums))
nums = [1189, 521, 817, 449, 508, 139, 1346, 161, 1051, 419, 281, 1183, 197, 1124, 327, 469, 1053, 23, 236, 98, 1283, 429, 274, 426, 475, 250, 1291, 1036, 262, 590, 855, 85, 188, 1173, 597, 75, 984, 1059, 919, 1311, 120, 378, 1198, 182, 481, 1498, 905, 884, 599, 1027, 740, 1281, 1076, 1319, 391, 378, 798, 1100, 1055, 1239, 41, 495, 1153, 790, 169, 1150, 600, 766, 560, 763, 157, 726, 1409, 871, 836, 325, 1151, 124, 784, 1192, 57, 957, 714, 1450, 1, 1002, 1433, 1089, 395, 426, 1030, 1014, 1426, 503, 693, 751, 504, 527, 194, 63, 184, 437, 1197, 879, 1059, 533, 1193, 1462, 519, 875, 157, 958, 1088, 421, 1206, 557, 582, 1483, 123, 766, 495, 808, 829, 6, 534, 1387, 399, 538, 1109, 1417, 136, 1264, 877, 679, 405, 556, 1421, 703, 686, 529, 253, 553, 1408, 278, 933, 1207, 1454, 1452, 1093, 417, 133, 1392, 1358, 885, 912, 12, 462, 27, 249, 430, 604, 229, 1331, 562, 1489, 1276, 151, 1497, 638, 883, 118, 62, 785, 945, 235, 927, 1315, 456, 340, 1276, 790, 958, 1280, 977, 634, 392, 1418, 15, 333, 1068, 765, 553, 1254, 246, 756, 226, 1079, 403, 242, 1160, 1072, 459, 298, 1148, 967, 409, 1016, 460, 1355, 1261, 461, 878, 1402, 1195, 1052, 116, 1202,
        978, 70, 1204, 137, 1340, 639, 1051, 1233, 1391, 392, 984, 230, 1281, 708, 973, 1364, 457, 742, 252, 1475, 1430, 1041, 1328, 305, 991, 1401, 354, 142, 462, 561, 220, 1279, 852, 89, 518, 707, 421, 1377, 740, 1269, 949, 968, 415, 271, 609, 692, 1162, 848, 335, 1334, 346, 1012, 93, 302, 1003, 1316, 49, 1104, 1144, 1203, 538, 196, 388, 1066, 552, 730, 1409, 1125, 1323, 1484, 1245, 711, 97, 1269, 1487, 663, 531, 1229, 1313, 675, 621, 622, 332, 101, 1464, 957, 820, 444, 777, 558, 1486, 98, 1044, 1025, 910, 1327, 280, 301, 848, 592, 480, 260, 825, 1129, 719, 137, 1318, 29, 13, 172, 586, 1193, 1428, 304, 1180, 1469, 206, 1011, 1264, 1160, 1349, 1102, 666, 381, 840, 1259, 483, 1432, 392, 1478, 777, 1379, 1229, 598, 1182, 1019, 1269, 641, 1016, 1014, 440, 497, 1129, 1269, 1437, 478, 722, 238, 1458, 101, 477, 863, 907, 150, 943, 331, 425, 148, 1157, 321, 39, 211, 909, 1258, 894, 858, 770, 1090, 905, 1455, 226, 420, 383, 1266, 884, 1046, 873, 605, 672, 288, 461, 169, 183, 833, 1185, 274, 998, 1335, 47, 422, 221, 868, 1438, 436, 321, 927, 728, 599, 778, 384, 595, 481, 879, 1111, 580, 1404, 884, 814, 999, 274, 1415, 574, 1404, 333, 541, 324]
print(Solution().uniqueXorTriplets(nums))
